[General]
image-path=../../../images
output-scalar-file-append = false
sim-time-limit=20s
seed-set = ${repetition}

**.amcMode = "D2D"
*.gNodeB*.cellularNic.nrPhy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false


##########################################################
#            VeinsManager parameters                     #
##########################################################
*.veinsManager.host = "localhost"       # if traci-launchd runs on localhost
#*.veinsManager.host = "sumo"       # traci-launchd on different host/container
*.veinsManager.moduleType = "simu5g.nodes.cars.NRCar"
*.veinsManager.moduleName = "car"
*.veinsManager.launchConfig = xmldoc("heterogeneous.launchd.xml")
*.veinsManager.updateInterval = 0.1s

##########################################################
#                      Mobility                          #
##########################################################
*.car[*].mobility.typename = "VeinsInetMobility"


############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.vec

**.vector-recording = false
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.routingRecorder.enabled = false

############ Floorplan definition #################
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### Number of Resource Blocks ################
**.numBands = 50

############### Transmission Power ##################
**.ueTxPower = 26
**.eNodeBTxPower = 40

**.targetBler = 0.01
**.blerShift = 5  

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


############### e/gNodeB configuration #################
*.masterEnb.mobility.initialX = 300m
*.masterEnb.mobility.initialY = 300m
*.secondaryGnb.mobility.initialX = 600m
*.secondaryGnb.mobility.initialY = 300m

# the LTE eNodeB must instantiate the NR PDCP layer to exploit Dual Connectivity
# the NR gNodeB comes with NR PDCP layer by default
*.masterEnb.nicType = "LteNicEnbD2D"
*.masterEnb.cellularNic.LtePdcpRrcType = "NRPdcpRrcEnb"
*.secondaryGnb.masterId = 1
**.dualConnectivityEnabled = true

############### X2 configuration #################
*.*nb.numX2Apps = 1    # one x2App per peering node
*.*nb.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.masterEnb.x2App[0].client.connectAddress = "secondaryGnb%x2ppp0" 
*.secondaryGnb.x2App[0].client.connectAddress = "masterEnb%x2ppp0" 

############## UE configuration ##################
# Enable dynamic association of UEs (based on best SINR)
*.car[*].cellularNic.nrPhy.dynamicCellAssociation = true
*.car[*].masterId = 0     # ignored if dynamic association is disabled
*.car[*].macCellId = 0    # ignored if dynamic association is disabled
*.car[*].nrMasterId = 1     # ignored if dynamic association is disabled
*.car[*].nrMacCellId = 1    # ignored if dynamic association is disabled

# Enable handover
*.car[*].cellularNic.nrPhy.enableHandover = true


# connect the UE's NIC to the corresponding serving eNB
*.car[0].macCellId = 1
*.car[0].masterId = 1
*.car[0].nrMacCellId = 2
*.car[0].nrMasterId = 2

#------------------------------------#
# Config DualConnectivity
#
# General topology configuration for the exemplary scenario for Dual Connectivity
# Use "runnable" configurations for testing (see below)
#
[Config DualConnectivity]
network = simu5g.simulations.NR.networks.SingleCell_withSecondaryGnb
sim-time-limit=20s
description = "Base configuration, do not run this config!"



## UE position
#*.ue[0].mobility.initialX = 450m
#*.ue[0].mobility.initialY = 350m
#------------------------------------#





#------------------------------------#
# Config VoIP-DL
#
# General configuration for Voice-over-IP DL traffic to the UE
# Use "runnable" configurations for testing (see below)
# 
[Config DualConnectivity-VoIP-DL]
extends = DualConnectivity
description = "Base configuration, do not run this config!"

## one UDP application for each user
#*.ue[*].numApps = 1

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps) 
*.server.numApps = 1

##============= Application Setup =============
#*.ue[*].app[*].typename = "VoIPReceiver"
#*.ue[*].app[*].localPort = 3000+ancestorIndex(0)

*.server.app[*].typename = "VoIPSender"
*.server.app[*].PacketSize = 40
*.server.app[*].destAddress = "ue[0]" # obtain the address of the client by reading its index in the array of udp Apps
*.server.app[*].localPort = 3088+ancestorIndex(0) 
*.server.app[*].destPort = 3000+ancestorIndex(0)
*.server.app[*].startTime = uniform(0s,0.02s)
#------------------------------------#


#------------------------------------#
# Config VoIP-UL
#
# General configuration for Voice-over-IP UL traffic from the UE
# Use "runnable" configurations for testing (see below)
# 
[Config DualConnectivity-VoIP-UL]
extends = DualConnectivity
description = "Base configuration, do not run this config!"

# one UDP application for each user
*.ue[*].numApps = 1

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps) 
*.server.numApps = 1

#============= Application Setup =============
*.server.app[*].typename = "VoIPReceiver"
*.server.app[*].localPort = 1000+ancestorIndex(0)

*.ue[*].app[*].typename = "VoIPSender"
*.ue[*].app[*].destAddress = "server" 
*.ue[*].app[*].localPort = 3088+ancestorIndex(0)
*.ue[*].app[*].destPort = 1000+ancestorIndex(0)
*.ue[*].app[*].startTime = uniform(0s,0.02s)
#------------------------------------#





###########################
# Runnable configurations #
###########################

# In the current version, the Ip2Nic module of the master eNB (the UE) selects which path
# to follow based on the Type of Service (TOS) field:
# - use master eNB if tos < 10
# - use secondary gNB if 10 <= tos < 20
# - use split bearer if tos >= 20
#
# To change the policy, change the implementation of the Ip2Nic::markPacket() function 

#------------------------------------#
[Config DualConn-MasterOnly-DL]
extends=DualConnectivity-VoIP-DL
description = "dual connectivity, master only, Voice-over-IP (downlink)"
*.server.app[*].tos = -1
#------------------------------------#

#------------------------------------#
[Config DualConn-MasterOnly-UL]
extends=DualConnectivity-VoIP-UL
description = "dual connectivity, master only, Voice-over-IP (uplink)"
*.ue[*].app[*].tos = -1
#------------------------------------#

#------------------------------------#
[Config DualConn-SecondaryOnly-DL]
extends=DualConnectivity-VoIP-DL
description = "dual connectivity, secondary only, Voice-over-IP (downlink)"
*.server.app[*].tos = 10
#------------------------------------#

#------------------------------------#
[Config DualConn-SecondaryOnly-UL]
extends=DualConnectivity-VoIP-UL
description = "dual connectivity, secondary only, Voice-over-IP (uplink)"
*.ue[*].app[*].tos = 10
#------------------------------------#



#------------------------------------#
# In this configuration, one UE has TWO independent DL connections, one
# going through the LTE eNodeB, the other one through the gNodeB
# 
[Config DualConn-MasterPlusSecondary-DL]
extends = DualConnectivity-VoIP-DL
description = "Dual connectivity con dos carros: VoIP downlink desde el servidor y D2D entre carros"

*.numCars = 2

# ============================
# Configuración de movilidad
# ============================
*.car[*].mobility.typename = "VeinsInetMobility"

# ============================
# Configuración de VoIP DL desde el servidor
# ============================
*.car[*].numApps = 2

# Carros reciben paquetes VoIP del servidor
*.car[*].app[0].typename = "VoIPReceiver"
*.car[*].app[0].localPort = 3000
*.car[*].app[0].isNrPacket = true

# Carros se comunican entre sí usando D2D
*.car[0].app[1].typename = "VoIPSender"
*.car[0].app[1].destAddress = "car[1]"
*.car[0].app[1].localPort = 3001
*.car[0].app[1].destPort = 3002

*.car[1].app[1].typename = "VoIPReceiver"
*.car[1].app[1].localPort = 3002

# ============================
# Configuración del servidor
# ============================
*.server.numApps = 2
*.server.app[0].typename = "VoIPSender"
*.server.app[0].destAddress = "car[0]"
*.server.app[0].localPort = 3088
*.server.app[0].destPort = 3000
*.server.app[0].tos = 10
*.server.app[0].isNrPacket = true

*.server.app[1].typename = "VoIPSender"
*.server.app[1].destAddress = "car[1]"
*.server.app[1].localPort = 3089
*.server.app[1].destPort = 3000
*.server.app[1].tos = 10
*.server.app[1].isNrPacket = true

# ============================
# Dual connectivity + D2D
# ============================
**.amcMode = "D2D"
*.car[*].cellularNic.d2dInitialMode = true
*.gNodeB*.cellularNic.nrPhy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false

# Handover y asociación dinámica
*.car[*].cellularNic.nrPhy.enableHandover = true
*.car[*].cellularNic.nrPhy.dynamicCellAssociation = true
*.car[*].masterId = 0
*.car[*].macCellId = 0
*.car[*].nrMasterId = 1
*.car[*].nrMacCellId = 1



# 
[Config DualConn-MasterPlusSecondary-UL]
extends=DualConnectivity-VoIP-UL
description = "dual connectivity, master and secondary, Voice-over-IP (uplink)"
# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps) 
*.server.numApps = 2
# one UDP application for each user
*.ue[*].numApps = 2
*.ue[*].app[0].tos = -1
*.ue[*].app[1].tos = 10
#------------------------------------#




#------------------------------------#
# In this configuration, one UE has one DL connection, exploiting Split Bearer feature
# 
[Config DualConn-SplitBearer-DL]
extends=DualConnectivity-VoIP-DL
description = "dual connectivity, split bearer, Voice-over-IP (downlink)"
*.server.app[*].tos = 20
#------------------------------------#


#------------------------------------#
# In this configuration, one UE has one UL connection, exploiting Split Bearer feature
# 
[Config DualConn-SplitBearer-UL]
extends=DualConnectivity-VoIP-UL
description = "dual connectivity, split bearer, Voice-over-IP (uplink)"
*.ue[*].app[*].tos = 20

#------------------------------------#